#+TITLE: 跟老 K 一起学 Rust
#+STARTUP: inlineimages content
#+AUTHOR: Eviler
#+OPTIONS: creator:t toc:nil num:t
#+PROPERTY: header-args :eval no
#+LANGUAGE: zh-CN
#+HUGO_BASE_DIR: ../../
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_SECTION: blog
#+HUGO_CATEGORIES: 计算机
#+HUGO_CUSTOM_FRONT_MATTTER: :authorbox true :comments true :toc false :mathjax true
#+HUGO_DRAFT: false
#+HUGO_WEIGHT: auto
#+HUGO_TAGS: Rust

* TODO 跟老 K 一起学 Rust (二)
:PROPERTIES:
:EXPORT_FILE_NAME: learn-rust-with-k-part2
:EXPORT_DATE: 2019-12-18
:END:

** =Trait= 和 =Display=

<!--more-->
#+NAME: 程序一
#+BEGIN_SRC rust
struct Person {
    name: String,
    age: u32,
}

fn main() {
    let alice = Person {
        name: String::from("Alice"),
        age: 30,
    };
    println!("Person: {}", alice);
}
#+END_SRC

编译报错：

#+BEGIN_EXAMPLE
error[E0277]: `Person` doesn't implement `std::fmt::Display`
  --> t001.rs:11:28
   |
11 |     println!("Person: {}", alice);
   |                            ^^^^^ `Person` cannot be formatted with the default formatter
   |
   = help: the trait `std::fmt::Display` is not implemented for `Person`
   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
   = note: required by `std::fmt::Display::fmt`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0277`
#+END_EXAMPLE

错误的原因是 Person 没有实现 =std::fmt::Display= Trait. 实现这个 Trait 就能够修
复这个错误。

#+BEGIN_SRC rust
impl std::fmt::Display for Person {
    fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::result::Result<(), std::fmt::Error> {
        write!(fmt, "{} ({} yeas old)", self.name, self.age)
    }
}
#+END_SRC

结论：
1. Rust 中没有面向对象的概念， ~trait~ 也不是 ~class~, *没有继承*!
2. Rust 使用 ={}= 进行字符串插值时，被插值参数必须要实现 =std::fmt::Display= Trait.
3. =&self= 是 =self: &Self= 的语法糖。
4. =()= 类似 C 语言中的 =void=, 不同的是 =()= 既是类型，也是值。
5. 命名约定： 宏都以 =!= 结尾。
6. 与 C++ 不同，Rust 用 =::= 来表示域，C++ 用 ~:~ 。
7. ~&~ 表示使用 =引用= 的方式传参，这一点和 C++ 类似。

#+BEGIN_QUOTE
作为一个老鸟，肯定会思考：既然字符串插值的占位符是 ~{}~, 那如果要打印原始的 ~{}~ 该如何转义呢？

猜一下， 是 ~{{{}~ ? 不美观，而且看样占位符实际上是两个字符: ={= 和 =}=, 美观点
也应该是： ~{{}}~.

Right!
#+END_QUOTE

** 分号
** 数字类型
** 循环打印数字

* DONE 跟老 K 一起学 Rust (一)
:PROPERTIES:
:EXPORT_FILE_NAME: learn-rust-with-k-part1
:EXPORT_DATE: 2019-12-18
:END:

开始之前的环境配置， 本节是繁琐的准备工作，已经完成的同学可以跳过。
<!--more-->

** 安装工具链
我的环境是 MacOS, 并且使用 HomeBrew 来管理软件的安装。

修改环境变量，在 =~/.zshrc= 文件中添加如下配置：

#+BEGIN_EXAMPLE
export CARGO_HOME=/usr/local/var/cargo
export RUSTUP_HOME=/usr/local/var/rustup
export RUSTUP_DIST_SERVER="https://mirrors.ustc.edu.cn/rust-static"
export RUSTUP_UPDATE_ROOT="https://mirrors.ustc.edu.cn/rust-static/rustup"
export PATH="${PATH}:${CARGO_HOME}/bin"
if (command -v rustc > /dev/null 2>&1); then
    export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
fi
#+END_EXAMPLE

以上的配置解释：
- =cargo= 是 Rust 的包管理软件， =CARGO_HOME= 用来配置 cago 包的安装目录，我更喜欢安装在 =/usr/local/var/cargo= 目录下。
- =rustup= 是 Rust 工具链管理命令行工具。
- =RUST_DIST_SERVER= 和 =RUST_UPDATE_ROOT=: 避免 GFW 的干扰，使用中科大的镜像。
- =RUST_SRC_PATH= Rust 源代码路径，对标准库的功能进行文档提示或者补全之用。

使配置生效：
#+BEGIN_EXAMPLE
source ~/.zshrc
#+END_EXAMPLE

安装 =rust-init=

#+BEGIN_EXAMPLE
brew install rustup-init
rustup-init
#+END_EXAMPLE

安装 Rust 稳定版本的编译器等工具链并设置为默认工具链。
#+BEGIN_EXAMPLE
rustup default stable
#+END_EXAMPLE

Rust 的编译工具链命名遵循规范： =<channel>[-<date>][-<host>]=. 各个部分说明如下：

#+BEGIN_EXAMPLE
<channel>       = stable|beta|nightly|<version>
<date>          = YYYY-MM-DD
<host>          = <target-triple>
#+END_EXAMPLE

如： =stable=, =stable-x86_64-pc-windows-msvc=, =nightly-2019-11-04= 等都是合法
的工具链名称。特别注意的是 =channel=, =stable= 表示是稳定版本， =nightly= 表示为
每日构建版本。部分实验性的功能或者特性只有在 =nightly= 版本中支持。有些第三方库
在构建的时候可能要求你的工具链是 =nightly= 版本。但是截至到现在（2019-12-18)
=stable= 版本的特性已经足够我们学习的了。：）

#+BEGIN_EXAMPLE
rustup component add rls clippy rust-analysis rust-src rustfmt
#+END_EXAMPLE

安装一些辅助用的工具：
- =rls= 全称是 Rust Language Server, 就是支持微软的 =lsp= 的语言服务器，对编辑器进行语法提示，语义级别的检索以及智能提示等功能。
- =clippy= Rust 语法检查工具。
- =rust-analysis= Rust 分析器。
- =rust-src= Rust 源码。
- =rustfmt= Rust 源代码格式化工具。

安装完成以后不要忘了检查一下是否安装成功：

#+BEGIN_EXAMPLE
╭ kerberos@kmacbookh   ~ 
╰ cargo version
cargo 1.38.0 (23ef9a4ef 2019-08-20)
╭ kerberos@kmacbookh   ~ 
╰ rustc --version
rustc 1.38.0 (625451e37 2019-09-23)
╭ kerberos@kmacbookh   ~ 
╰ rls --version
rls 1.38.0 (7b0a20b 2019-08-11)
╭ kerberos@kmacbookh   ~ 
╰ rustfmt --version
rustfmt 1.4.4-stable (0462008d 2019-08-06)
#+END_EXAMPLE

** 安装编辑器

推荐使用 =Visual-Studio-Code= 作为 Rust 的编辑器，既有语法高亮，配合一些 Rust 插
件还能进行智能提示以及调试，还是相当舒心的。

#+BEGIN_EXAMPLE
brew cask install visual-studio-code
code --install-extension Swellaby.rust-pack
code --install-extension vadimcn.vscode-lldb
code --install-extension formulahendry.code-runner
#+END_EXAMPLE

- 安装 =Visual Studio Code=
- 安装 =Rust Extension Pack= 插件。
- 安装 =CodeLLDB= 插件。
- 安装 =Code Runner= 插件。

比较正式的项目用 =cargo new --bin tutor01= 这种方式合适一点，但是学习的话，都是
一些简短的样例代码，用 =cargo= 来创建就有些臃肿，不如直接用 =CodeRunner= 跑单个
文件好。

** 创建学习目录
我打算在 =~/ws/playground/rust= 目录下进行学习并且编写实验性质的代码：

#+BEGIN_EXAMPLE
mkdir -p ~/ws/playgroud/rust
cd ~/ws/playground/rust
#+END_EXAMPLE

由于 =rustup= 可以根据项目指定不同的工具链版本，这里我们就使用 =stable=:
#+BEGIN_EXAMPLE
echo "stable" > rust-toolchain
#+END_EXAMPLE
在 =rust-toolchain= 文件中显示指明我们使用 =stable= 的工具链（尽管前面我们仅仅安
装了 =stable= 工具链）如果以后你的系统工具链安装成 =nightly= 的话，也不会影响这
个工程。相反，如果你想实验某些 =nightly= 的功能的话，完全可以另外开辟一个目录，
并在其中创建 =rust-toolchain= 文件，在里面声明 =nightly= 工具链的版本即可。

说了这么多，最后我们以经典的 =hello world= 来结束这么繁琐的设置工作，以证明我们
终于可以开始写代码了！
#+BEGIN_EXAMPLE
cd ~/ws/playground/rust && code .
#+END_EXAMPLE
新建一个文件叫做 =hello.rs= (所有 Rust 的源文件的扩展名都是 =rs=). 输入源代码:
#+BEGIN_SRC rust
fn main() {
    println!("Hello, World");
}
#+END_SRC
点击 =CodeRunner= 的运行按钮，就看到 VSCode 的输出了。

#+CAPTION: rust hello world
#+ATTR_ORG: :width 512
#+ATTR_HTML: :width 512
[[file:rust-hello-world.jpg]]
