#+STARTUP: inlineimages content
#+AUTHOR: Evilee
#+LANGUAGE: zh-CN
#+OPTIONS: creator:t toc:nil num:t
#+PROPERTY: header-args :eval no
#+HUGO_CUSTOM_FRONT_MATTTER: :authorbox true :comments true :toc false :mathjax true
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_BASE_DIR: ../../../
#+DATE: 2020-03-09
#+HUGO_SECTION: blog
#+HUGO_CATEGORIES: 计算机
#+HUGO_TAGS: ssh gfw
#+TITLE: 使用 ASP.NET Core 建立 WebApi 服务
#+HUGO_DRAFT: true

还是选一个靠谱的吧.

<!--more-->
* 原贴地址
https://dev.to/_patrickgod/net-core-3-1-web-api-entity-framework-jumpstart-part-1-4jla

* 环境
macos
vscode
dotnet-sdk

#+BEGIN_EXAMPLE
brew cast install dotnet-core
brew cast install visaul-studio-code
#+END_EXAMPLE

* 工程手脚架

#+BEGIN_EXAMPLE
cd ~/ws
mkdir -p dotnet/Dipper && cd dotnet/Dipper
#+END_EXAMPLE

创建解决方案
#+BEGIN_EXAMPLE
dotnet sln -n Dipper
dotnet new webapi -n Dipper.Dubhe
dotnet sln add Dipper.Dubhe
#+END_EXAMPLE

不喜欢缺省的代码格式，修改下
#+BEGIN_EXAMPLE
cat > omnisharp.json << END
{
        "FormattingOptions": {
                "NewLinesForBracesInLambdaExpressionBody": false,
                "NewLinesForBracesInAnonymousMethods": false,
                "NewLinesForBracesInAnonymousTypes": false,
                "NewLinesForBracesInControlBlocks": false,
                "NewLinesForBracesInTypes": false,
                "NewLinesForBracesInMethods": false,
                "NewLinesForBracesInProperties": false,
                "NewLinesForBracesInAccessors": false,
                "NewLineForElse": false,
                "NewLineForCatch": false,
                "NewLineForFinally": false
        }
}
END
#+END_EXAMPLE

打开工程
#+BEGIN_EXAMPLE
code .
#+END_EXAMPLE

vscode 中隐藏临时文件
#+BEGIN_EXAMPLE
mkdir .vscode
cat > .vscode/settings.json << END
{
    "files.exclude": {
        "*/obj/": true,
        "*/bin/": true
    }
}
END
#+END_EXAMPLE

修改 =Properties/launchSettings.json= 文件中，=applicationUrl= 修改为下面代码的
样式，http 在前， https 在后。
#+BEGIN_SRC json
"profiles": {
    "Dipper.Dubhe": {
        "commandName": "Project",
        "launchBrowser": true,
        "launchUrl": "weatherforecast",
        "applicationUrl": "http://localhost:5000;https://localhost:5001",
        "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
        }
    }
}
#+END_SRC

按下 F5, 开始运行，可以看到一片空白，不过没有出错就表示手脚架成功了。

#+BEGIN_SRC sh
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection
#+END_SRC

* 继续

#+BEGIN_SRC sh
dotnet tool install --global dotnet-ef
dotnet tool install --global dotnet-script
dotnet add package Microsoft.EntityFrameworkCore.Design
#+END_SRC

配置好数据库。

* 如何处理 route 参数, query 参数, post 参数 和 body 参数
#+BEGIN_SRC csharp
public class SomeQuery {
    public string SomeParameter1 {get; set;}
    public int? SomeParameter2 {get; set;}
}

[HttpGet]
public IActionResult FindSomething([FromRoute] SomeQuery query) {
}

[HttpGet]
public IActionResult GetSomething([FromRoute] int someId, [FromQuery] SomeQuery query) {
}

public class ApiModel {
    [FromRoute]
    public int SomeId {get; set;}
    [FromQuery]
    public string SomeParameter1 {get; set;}
    [FromQuery]
    public int? SomeParameter2 {get; set;}
}
#+END_SRC

* 如何使用 Postgres 的 Enum 数据类型
假设有如下自定义的枚举类型:
#+BEGIN_SRC csharp
public enum MyEnumType {
    FieldA,
    FildB,
}

#+END_SRC
在数据库的 DbContext 中创建 Enum 类型并在静态构造函数中进行映射。
#+BEGIN_SRC csharp
using Npgsql;
public class MyDbContext: DbContext {
    protected override void OnModelCreating(ModelBuilder builder) {
        builder.HasPostgresqEnum<MyEnumType>();
    }

    static MyDbContext() {
        NpgsqlConnection.GlobalTypeMapper.MapEnum<MyEnumType>();
    }
}
#+END_SRC

就可以愉快地玩耍了:
#+BEGIN_SRC csharp
public class Authror {
    public MyEnumType MyEnum {get; set;}
}

using (var ctx = MyDbContext()) {
    ctx.Authors.Add(new Author{MyEnum = MyEnumType.FieldA});
    ctx.SaveChanges();

    var author = ctx.Authors.Single(b => b.MyEnum == MyEnumType.FieldA);
}
#+END_SRC
* EntityFrameworkCore

#+BEGIN_SRC sh
dotnet ef migrations add InitialCreate
dotnet ef database update
#+END_SRC

* 代码共享
假如有两个应用（例如：用户端和管理后台）需要共享某些代码（如数据模型），可以建立
三个工程: Library, Front, Admin.

#+BEGIN_EXAMPLE
Library/Library.csproj
Front/Web1.csproj
Admin/Web2.csproj
#+END_EXAMPLE

Front 和 Admin 共同依赖 Library.

#+BEGIN_SRC sh
dotnet add Front reference Library
dotnet add Admin reference Libaray
#+END_SRC

这样就可以在 Front 和 Admin 中使用 Library 的代码了。
#+BEGIN_SRC csharp
using Library.Models;
#+END_SRC

* 多数据库配置
代码:
#+BEGIN_SRC csharp
public class Startup {
    public void ConfigureServices(IServiceCollection services) {
        services.AddDbContext<Extern1DbContext>(options => options.UsePgsql(Configuration.GetConnectionString("DefaultConnection1"),
                                                                            b => b.MigrationsAssembly("CurrentProjectName")));
        services.AddDbContext<Extern2DbContext>(options => options.UsePgsql(Configuration.GetConnectionString("DefaultConnection2"),
                                                                            b => b.MigrationsAssembly("CurrentProjectName")));
    }
}
#+END_SRC

迁移命令:
#+BEGIN_SRC sh
dotnet ef migrations --context Extern1DbContext add InitialExtern1 -o Migrations/Extern1
dotnet ef migrations --context Extern2DbContext add InitialExtern1 -o Migrations/Extern2
dotnet ef database update --context Extern1DbContext
dotnet ef database update --context Extern2DbContext
#+END_SRC
* AutoMapper 递归映射
#+BEGIN_SRC csharp
public class SourceOuterObject
{
  public SourceSet SourceSet { get; set; }
}

public class SourceSet
{
  public List<SourceObject> SourceList{ get; set; }
}

public class TargetOuterObject
{
  public List<TargetObject> TargetList{ get; set; }
}
#+END_SRC

#+BEGIN_SRC csharp
Mapper.CreateMap<SourceObject, TargetObject>();
Mapper.CreateMap<SourceOuterObject, TargetOuterObject>()
    .ForMember(dest => dest.TargetList, opt => opt.MapFrom(src => src.SourceSet.SourceList);
#+END_SRC

另外一个不太优美的方案:
#+BEGIN_SRC sharp
Mapper.CreateMap<SourceOuterObject, TargetOuterObject>();
Mapper.CreateMap<SourceObject, TargetObject>();
Mapper.CreateMap<SourceSet, List<TargetObject>>()
    .ConvertUsing(ss => ss.SourceList.Select(bs => Mapper.Map<SourceObject, TargetObject>(bs)).ToList());
#+END_SRC

* Full Text Search for .NetCore

** 方案一:
假设如下模型:
#+BEGIN_SRC csharp
public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
}
#+END_SRC
使用 src_sh[:exports code]{dotnet ef migrations add ...} 生成迁移文件以后，需要
手动修改：
#+BEGIN_SRC csharp
protected override void Up(MigrationBuilder migrationBuilder)
{
    migrationBuilder.Sql(@"CREATE INDEX fts_idx ON ""Product"" USING GIN (to_tsvector('jiebacfg', ""Name"" || ' ' || ""Description""));");
}

protected override void Down(MigrationBuilder migrationBuilder) {
    migrationBuilder.Sql(@"DROP INDEX fts_idx;");
}
#+END_SRC

查询方式：
#+BEGIN_SRC csharp
var context = new ProductDbContext();
var npgsql = context.Products
    .Where(p => EF.Functions.ToTsVector("jiebacfg", p.Name + " " + p.Description).Matches("Npgsql"))
    .ToList();
#+END_SRC
#+BEGIN_QUOTE
=EF.Functions.ToTsVector= 仅支持在 Linq 闭包中执行，外部直接调用会 =System.Exception=.
#+END_QUOTE

** 方案二：
直接生成 =Tsv= 列:
#+BEGIN_SRC csharp
public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
    public NpgsqlTsVector SearchVector { get; set; }
}
#+END_SRC
在 DbContext 中为 =SearchVector= 创建索引:
#+BEGIN_SRC csharp
protected override void OnModelCreating(ModelBuilder modelBuilder) {
    modelBuilder.Entity<Product>()
        .HasIndex(p => p.SearchVector)
        .HasMethod("GIN"); // Index method on the search vector (GIN or GIST)
}
#+END_SRC
自动生成数据库迁移代码：
#+BEGIN_SRC sh
dotnet ef migrations add ....
#+END_SRC

手动编辑生成的迁移代码，目的是为了在更新记录对应字段时，自动触发更新 TSV.
#+BEGIN_SRC csharp
public partial class CreateProductTable : Migration {
    protected override void Up(MigrationBuilder migrationBuilder) {
        // Migrations for creation of the column and the index will appear here, all we need to do is set up the trigger to update the column:

        migrationBuilder.Sql(
            @"CREATE TRIGGER product_search_vector_update BEFORE INSERT OR UPDATE
              ON ""Products"" FOR EACH ROW EXECUTE PROCEDURE
              tsvector_update_trigger(""SearchVector"", 'jiebacfg', ""Name"", ""Description"");");

        // If you were adding a tsvector to an existing table, you should populate the column using an UPDATE
        // migrationBuilder.Sql("UPDATE \"Products\" SET \"Name\" = \"Name\";");
    }

    protected override void Down(MigrationBuilder migrationBuilder) {
        // Migrations for dropping of the column and the index will appear here, all we need to do is drop the trigger:
        migrationBuilder.Sql("DROP TRIGGER product_search_vector_update");
    }
}
#+END_SRC

在代码中使用:
#+BEGIN_SRC csharp
var context = new ProductDbContext();
var npgsql = context.Products
    .Where(p => p.SearchVector.Matches("Npgsql"))
    .ToList();
#+END_SRC
* JWT
 1. Authentication 认证
 2. Authorization 授权

** 如何停用 Token? 把 Token/或者 User 存下来(数据库或者 redis)
对于想屏蔽用户的方案：每个用户创建 JWT 以后都保存下来，接收到 JWT 以后，验证查询
其是否在回收的 JWTs 中，不是的话通过，否则回收，屏蔽用户。
** 使用 RefreshToken 和 AccessToken 方案

* Snippets
** json 编码和解码
#+BEGIN_SRC csharp
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

public class Model {
    [JsonPropertyName("book_id")]
    public string BookId {get; set;}

    public string BookName {get; set;}
}

Model deserialized = JsonSerializer.Deserialize<Model>(json);
string json =  JonsSerializer.Serialize(deserialized);
#+END_SRC

** base64 编码和解码
#+BEGIN_SRC csharp
using System;
using System.Text;
bytes[] bytes = Convert.FromBase64String("e2NRUZbLCwXu/v8Y9+LZVA==");
string s = Convert.ToBase64String(bytes);
#+END_SRC

** AES 加密和解密
#+BEGIN_SRC csharp
using System.Security.Cryptography;
using System.IO;

var text = "Hello World";
var buffer = Encoding.UTF8.GetBytes(text);

var iv = GetRandomData(128);
var keyAes = GetRandomData(256);

if (string.IsNullOrEmpty(keyAes))
    throw new ArgumentException("Key must have valid value.", nameof(key));
if (string.IsNullOrEmpty(text))
    throw new ArgumentException("The text must have valid value.", nameof(text));

byte[] result;
using (var aes = Aes.Create()) {
    aes.Key = keyAes;
    aes.IV = iv;
    using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))
        using (var resultStream = new MemoryStream()) {
            using (var aesStream = new CryptoStream(resultStream, encryptor, CryptoStreamMode.Write))
                using (var plainStream = new MemoryStream(buffer)) {
                    plainStream.CopyTo(aesStream);
                }
            result = resultStream.ToArray();
        }
}
#+END_SRC
* 多图片上传
Image.Name: 一个 UUID
Image.Ext: .jpg
IFile

上传:
[
    {
        Name: 'aaaaaa'
        Ext: .jpg
    },
    {
        IFile, xxxxx
    }
]
** 如何 diff?
#+BEGIN_SRC csharp
var list1 = new List<int> { 1, 2, 3, 4, 5};
var list2 = new List<int> { 3, 4, 5, 6, 7 };

var list3 = list1.Except(list2); //list3 contains only 1, 2
var list4 = list2.Except(list1); //list4 contains only 6, 7
var resultList = list3.Concat(list4).ToList(); //resultList contains 1, 2, 6, 7
#+END_SRC
