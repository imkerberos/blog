#+STARTUP: inlineimages content
#+AUTHOR: Evilee
#+LANGUAGE: zh-CN
#+OPTIONS: creator:t toc:nil num:t
#+PROPERTY: header-args :eval no
#+HUGO_CUSTOM_FRONT_MATTTER: :authorbox true :comments true :toc false :mathjax true
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_BASE_DIR: ../../../
#+DATE: 2020-03-09
#+HUGO_SECTION: blog
#+HUGO_CATEGORIES: 计算机
#+HUGO_TAGS: ssh gfw
#+TITLE: 使用 ASP.NET Core 建立 WebApi 服务
#+HUGO_DRAFT: true

还是选一个靠谱的吧.

<!--more-->
* 原贴地址
https://dev.to/_patrickgod/net-core-3-1-web-api-entity-framework-jumpstart-part-1-4jla

* 环境
macos
vscode
dotnet-sdk

#+BEGIN_EXAMPLE
brew cast install dotnet-core
brew cast install visaul-studio-code
#+END_EXAMPLE

* 工程手脚架

#+BEGIN_EXAMPLE
cd ~/ws
mkdir -p dotnet/Dipper && cd dotnet/Dipper
#+END_EXAMPLE

创建解决方案
#+BEGIN_EXAMPLE
dotnet sln -n Dipper
dotnet new webapi -n Dipper.Dubhe
dotnet sln add Dipper.Dubhe
#+END_EXAMPLE

不喜欢缺省的代码格式，修改下
#+BEGIN_EXAMPLE
cat > omnisharp.json << END
{
        "FormattingOptions": {
                "NewLinesForBracesInLambdaExpressionBody": false,
                "NewLinesForBracesInAnonymousMethods": false,
                "NewLinesForBracesInAnonymousTypes": false,
                "NewLinesForBracesInControlBlocks": false,
                "NewLinesForBracesInTypes": false,
                "NewLinesForBracesInMethods": false,
                "NewLinesForBracesInProperties": false,
                "NewLinesForBracesInAccessors": false,
                "NewLineForElse": false,
                "NewLineForCatch": false,
                "NewLineForFinally": false
        }
}
END
#+END_EXAMPLE

打开工程
#+BEGIN_EXAMPLE
code .
#+END_EXAMPLE

vscode 中隐藏临时文件
#+BEGIN_EXAMPLE
mkdir .vscode
cat > .vscode/settings.json << END
{
    "files.exclude": {
        "*/obj/": true,
        "*/bin/": true
    }
}
END
#+END_EXAMPLE

修改 =Properties/launchSettings.json= 文件中，=applicationUrl= 修改为下面代码的
样式，http 在前， https 在后。
#+BEGIN_SRC json
"profiles": {
    "Dipper.Dubhe": {
        "commandName": "Project",
        "launchBrowser": true,
        "launchUrl": "weatherforecast",
        "applicationUrl": "http://localhost:5000;https://localhost:5001",
        "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
        }
    }
}
#+END_SRC

按下 F5, 开始运行，可以看到一片空白，不过没有出错就表示手脚架成功了。

#+BEGIN_SRC sh
dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection
#+END_SRC

* 继续

#+BEGIN_SRC sh
dotnet tool install --global dotnet-ef
dotnet add package Microsoft.EntityFrameworkCore.Design
#+END_SRC

配置好数据库。

* 如何处理 route 参数, query 参数, post 参数 和 body 参数
#+BEGIN_SRC csharp
public class SomeQuery {
    public string SomeParameter1 {get; set;}
    public int? SomeParameter2 {get; set;}
}

[HttpGet]
public IActionResult FindSomething([FromRoute] SomeQuery query) {
}

[HttpGet]
public IActionResult GetSomething([FromRoute] int someId, [FromQuery] SomeQuery query) {
}

public class ApiModel {
    [FromRoute]
    public int SomeId {get; set;}
    [FromQuery]
    public string SomeParameter1 {get; set;}
    [FromQuery]
    public int? SomeParameter2 {get; set;}
}
#+END_SRC

* 如何使用 Postgres 的 Enum 数据类型
假设有如下自定义的枚举类型:
#+BEGIN_SRC csharp
public enum MyEnumType {
    FieldA,
    FildB,
}

#+END_SRC
在数据库的 DbContext 中创建 Enum 类型并在静态构造函数中进行映射。
#+BEGIN_SRC csharp
using Npgsql;
public class MyDbContext: DbContext {
    protected override void OnModelCreating(ModelBuilder builder) {
        builder.HasPostgresqEnum<MyEnumType>();
    }

    static MyDbContext() {
        NpgsqlConnection.GlobalTypeMapper.MapEnum<MyEnumType>();
    }
}
#+END_SRC

就可以愉快地玩耍了:
#+BEGIN_SRC csharp
public class Authror {
    public MyEnumType MyEnum {get; set;}
}

using (var ctx = MyDbContext()) {
    ctx.Authors.Add(new Author{MyEnum = MyEnumType.FieldA});
    ctx.SaveChanges();

    var author = ctx.Authors.Single(b => b.MyEnum == MyEnumType.FieldA);
}
#+END_SRC
* EntityFrameworkCore

#+BEGIN_SRC sh
dotnet ef migrations add InitialCreate
dotnet ef database update
#+END_SRC

* 代码共享
假如有两个应用（例如：用户端和管理后台）需要共享某些代码（如数据模型），可以建立
三个工程: Library, Front, Admin.

#+BEGIN_EXAMPLE
Library/Library.csproj
Front/Web1.csproj
Admin/Web2.csproj
#+END_EXAMPLE

Front 和 Admin 共同依赖 Library.

#+BEGIN_SRC sh
dotnet add Front reference Library
dotnet add Admin reference Libaray
#+END_SRC

这样就可以在 Front 和 Admin 中使用 Library 的代码了。
#+BEGIN_SRC csharp
using Library.Models;
#+END_SRC

* 多数据库配置
代码:
#+BEGIN_SRC csharp
public class Startup {
    public void ConfigureServices(IServiceCollection services) {
        services.AddDbContext<Extern1DbContext>(options => options.UsePgsql(Configuration.GetConnectionString("DefaultConnection1"),
                                                                            b => b.MigrationsAssembly("CurrentProjectName")));
        services.AddDbContext<Extern2DbContext>(options => options.UsePgsql(Configuration.GetConnectionString("DefaultConnection2"),
                                                                            b => b.MigrationsAssembly("CurrentProjectName")));
    }
}
#+END_SRC

迁移命令:
#+BEGIN_SRC sh
dotnet ef migrations --context Extern1DbContext add InitialExtern1 -o Migrations/Extern1
dotnet ef migrations --context Extern2DbContext add InitialExtern1 -o Migrations/Extern2
dotnet ef database update --context Extern1DbContext
dotnet ef database update --context Extern2DbContext
#+END_SRC
