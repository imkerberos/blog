#+STARTUP: inlineimages content
#+AUTHOR: Evilee
#+LANGUAGE: zh-CN
#+OPTIONS: creator:t toc:nil num:t
#+PROPERTY: header-args :eval no
#+HUGO_CUSTOM_FRONT_MATTTER: :authorbox true :comments true :toc false :mathjax true
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_BASE_DIR: ../../../
#+DATE: 2020-01-16
#+HUGO_SECTION: blog
#+HUGO_CATEGORIES: 计算机
#+HUGO_TAGS: Rust
#+TITLE: 陪老 K 学 Rust (十一)
#+HUGO_DRAFT: true

~Result~ 枚举
<!--more-->

~Option~ 可以帮助开发者解决 =空值= 问题，但是 =空值= 并不能帮开发者进行错误处理，
在绝大部分情况下，一旦代码出错，开发者需要根据错误的详细信息进行处理，做现场恢复
还是使用备选方案，亦或进行日志输出以帮助解决问题。 这些方案，用 =空值= 是无法满
足需求的。

但假如把 ~Option~ 的 ~None~ 替换成具体的错误信息 ~Err~,开发人员根据 ~Err~ 来进行
错误处理，这样 ~Result~ 这个枚举就产生了。形如：

#+BEGIN_SRC rust
enum Result<T,E> {
    Ok(T),
    Err(E),
}
#+END_SRC

当然，针对 ~Option~ 的 ~unwrap~ 和 ~unwrap_or~ 等就不能用于 ~Result~ 了。

Rust 中并没有 ~Exception~ 机制，函数的出错全靠 ~Result~ 来进行判断，这样就要求开
发者：

1. 永远不要调用 ~panic~, 给调用你 API 的开发者以处理的机会。
2. 永远不要调用导致 ~panic~ 的代码，如 ~unwrap~.
3. 如果可能，函数尽量使用 ~Result~ 作为返回值，以方便其他开发者处理。

~Result~ 中的两个关联值，其中一个是泛型类型为 ~T~ 的 ~Ok~, 另外一个是泛型类型为
~E~ 的 ~Err~. ~T~ 类型比较好理解，就是值的类型， ~E~ 类型呢？是否应该是某些特定
的类型？

* 以前的代码从 ~Option~ 转换成 ~Result~
在 ~Option~ 的样例代码 =除法计算= 中，用 ~None~ 表示无法计算，通过 ~division~ 的
代码实现，开发者可以确定 ~None~ 是因为除数为 0 而导致无法计算，但是单从
~division~ 的原型来看，是无法得知无法计算的原因的。从一个良好的接口设计角度来说，
~fn dvision(dvidend: i32, divisor: i32) -> Result<i32, &str>~ 返回一个错误的详细
描述会更好。

#+BEGIN_SRC rust
fn division(dividend: i32, divisor: i32) -> Result<i32,  &'static str> {
    if divisor == 0 {
        Err("divisor is zero")
    } else {
        Ok(dividend / divisor)
    }
}

fn main() {
    let r1 = division(4, 2);
    println!("4 / 2 = {:?}", r1);
    let r0 = division(4, 0);
    println!("4 / 0 = {:?}", r0);

    match r1 {
        Err(e) => {
            println!("error: {:?}", e);
            println!("error is: {:?}", r1.unwrap_err());
        },
        Ok(value) => {
            println!("r1's value is: {}", value);
            println!("r1's value is: {}", r1.unwrap());
        }
    }

    match r0 {
        Err(e) => {
            println!("error: {:?}", e);
            println!("error is: {:?}", r0.unwrap_err());
        },
        Ok(value) => {
            println!("r0's value is: {}", value);
            println!("r0's value is: {}", r0.unwrap());
        }
    }
}
#+END_SRC

运行输出：
#+BEGIN_EXAMPLE
4 / 2 = Ok(2)
4 / 0 = Err("divisor is zero")
r1's value is: 2
r1's value is: 2
error: "divisor is zero"
error is: "divisor is zero
#+END_EXAMPLE

* ~Result~ 处理的方案
在使用 ~Result~ 的情况下，如果每个函数调用都要使用 ~match~ 进行匹配，其代码的优
美程度并不比src_go[:exports code]{ret, err := some_call(arg1, arg2)} 更好。甚至
还有可能形成这样的波动拳：

#+BEGIN_SRC rust
struct MyError {
    ErrorCode0,
    ErrorCode1,
    ErrorCode2,
    ErrorCode3,
    ErrorCode4,
    ErrorCode5,
    ErrorCode6,
}

fn foo() -> Result<(), MyError>{
    return match call_fn0() {
        Err(e1) => ErrorCode0,
        Ok(v1) => match call_fn1(v1) {
            Err(e2) => ErrorCode1,
            Ok(v2) => match call_fn2(v2) {
                Err(e3) => ErrorCode2,
                Ok(v3) => match call_fn3(v3) {
                    Err(e4) => ErrorCode3,
                    Ok(v4) => match call_fn4(v4) {
                        Err(e5) => ErrorCode4,
                        Ok(v5) => (),
                    }
                }
            }
        }
    }
}
#+END_SRC

这种代码看上去简直丑到姥姥家了，所以 Rust 的错误处理方案也是围绕 ~Result~ 改了又
该，光我听说的就包括： ~error_chain~, ~failure~ 等。

* 在 ~main~ 函数中使用 ~Result~
