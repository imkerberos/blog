#+STARTUP: inlineimages content
#+AUTHOR: Evilee
#+LANGUAGE: zh-CN
#+OPTIONS: creator:t toc:nil num:t
#+PROPERTY: header-args :eval no
#+HUGO_CUSTOM_FRONT_MATTTER: :authorbox true :comments true :toc false :mathjax true
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_BASE_DIR: ../../../
#+DATE: 2020-01-16
#+HUGO_SECTION: blog
#+HUGO_CATEGORIES: 计算机
#+HUGO_TAGS: Rust
#+TITLE: 陪老 K 学 Rust (十一)
#+HUGO_DRAFT: true

~Result~ 枚举
<!--more-->

~Option~ 可以帮助开发者解决 =空值= 问题，但是 =空值= 并不能帮开发者进行错误处理，
在绝大部分情况下，一旦代码出错，开发者需要根据错误的详细信息进行处理，做现场恢复
还是使用备选方案，亦或进行日志输出以帮助解决问题。 这些方案，用 =空值= 是无法满
足需求的。

但假如把 ~Option~ 的 ~None~ 替换成具体的错误信息 ~Err~,开发人员根据 ~Err~ 来进行
错误处理，这样 ~Result~ 这个枚举就诞生了。形如：
#+BEGIN_SRC rust
enum Result<T,E> {
    Ok(T),
    Err(E),
}
#+END_SRC
当然，针对 ~Option~ 的 ~unwrap~ 和 ~unwrap_or~ 等就不能用于 ~Result~ 了。

Rust 中并没有 ~Exception~ 机制，函数的出错全靠 ~Result~ 来进行判断，这样就要求开
发者：

1. 永远不要调用 ~panic~, 给调用你 API 的开发者以处理的机会。
2. 永远不要调用导致 ~panic~ 的代码，如 ~unwrap~.
3. 如果可能，函数尽量使用 ~Result~ 作为返回值，以方便其他开发者处理。
