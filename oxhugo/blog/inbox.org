#+TITLE: 码农农场
#+STARTUP： content inlineimages
#+AUTHOR: Evilee
#+PROPERTY: header-args :eval no
#+LANGUAGE: zh-CN
#+OPTIONS: creator:t toc:nil
#+HUGO_BASE_DIR: ../../
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_SECTION: blog
#+HUGO_CUSTOM_FRONT_MATTER: :authorbox true :comments true :toc false :mathjax true

* Blog
:PROPERTIES:
:EXPORT_HUGO_MENU: :menu main :weight  -50
:EXPORT_FILE_NAME: _index
:END:
欢迎, 这里是我的博客。

* TODO 准备编写的主题
** TODO 从零学习 Scheme                                                        :@计算机:Scheme:
** TODO Swift 全栈之路                                                         :@计算机:Swift:
** TODO 打造顺手的终端控制台工作环境                                           :@计算机:tmux:
*** 0x00 用到的材料
1. tmux
2. zsh
3. zplug
4. karabiner-elements
5. xkeysnail
6. xclip
7. ranger

** TODO 在 MacOS 的 Emacs 中使用 RIME 输入法                                   :@计算机:Emacs:RIME:
** TODO 在 Manjaro 的 Emacs 中使用 RIME 输入法                                 :@计算机:Emacs:Linux:
** TODO MacOS 中的 tmux 配置                                                   :@计算机:MacOS:
** TODO Manjaro 中使用 xkeysnail 改变键盘映射                                  :@计算机:Linux:
** TODO 2020 年最稳的翻墙姿势                                                  :@计算机:caddy:v2ray:tls:
:PROPERTIES:
:EXPORT_FILE_NAME: xgfw-in-2020
:END:

caddy + v2ray + tls 配置
** TODO 谈 flutter, react-native 和技术吹                                      :@计算机:
:PROPERTIES:
:EXPORT_FILE_NAME: talk-about-flutter-and-react_native
:END:

** TODO 初识 SwiftNIO                                                          :@计算机:Swift:SwiftNIO:
:PROPERTIES:
:EXPORT_DATE: 2020-02-20
:EXPORT_FILE_NAME: intro-swiftnio2
:END:

=SwiftNIO= 是 SSWG (Swift Server Working Group) 最重要的基础组件之一, =Kitura=,
=Perfect=, =Vapor= 都基于 =SwiftNIO=.

<!--more-->

当然，如果只是基于以上三个框架进行开发，或者主要关注于 HTTP 层的开发，是没有必
要去了解 =SwiftNIO= 的。但如进行比较复杂的非阻塞模型开发的话，=SwiftNIO= 有着不
小的帮助。

或许你接触过 RxSwift 或者 ES6, 那么对 future, promise 等不会陌生. 但是小心，这里
有很多陷阱。ES6 中的 promise 和 RxSwift 中的 observable 很相似，但是 SwiftNIO 中
的 promise 确是和 RxSwift 中的 observer 相似。
* 对 Xcode 重新签名解决 Xvim2 加载警告                                           :@计算机:Xcode:
:PROPERTIES:
:EXPORT_DATE: 2021-03-04
:EXPORT_FILE_NAME: resign-xcode-to-avoid-xvim2-warning
:END:
自从 Xcode 禁止非官方插件后, 重新签名 Xcode 可以重新开启插件加载(Xvim2), 但是在使用命令行
的 xcodebuild 时, 会出现如下的错误:
<!--more-->
#+begin_quote
021-03-04 15:33:29.144 xcodebuild[29907:2618716] WARNING: Failed to load plugin at path: "/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin", skipping. Error: Error Domain=NSCocoaErrorDomain Code=3587 "dlopen_preflight(/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2): no suitable image found.  Did find:
        /Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2: code signature in (/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2) not valid for use in process using Library Validation: mapped file has no Team ID and is not a platform binary (signed with custom identity or adhoc?)
        /Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2: stat() failed with errno=1" UserInfo={NSLocalizedFailureReason=The bundle is damaged or missing necessary resources., NSLocalizedRecoverySuggestion=Try reinstalling the bundle., NSFilePath=/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2, NSDebugDescription=dlopen_preflight(/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2): no suitable image found.  Did find:
        /Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2: code signature in (/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2) not valid for use in process using Library Validation: mapped file has no Team ID and is not a platform binary (signed with custom identity or adhoc?)
        /Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin/Contents/MacOS/XVim2: stat() failed with errno=1, NSBundlePath=/Users/kerberos/Library/Application Support/Developer/Shared/Xcode/Plug-ins/XVim2.xcplugin, NSLocalizedDescription=The bundle “XVim2” couldn’t be loaded because it is damaged or missing necessary resources.}
#+end_quote
xcodebuild 命令显示出如上的错误, 可以用以下的命令验证:
#+begin_src bash
xcodebuild -list > /dev/null
#+end_src
重新签名:
#+begin_src bash
codesign -dvv /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild
codesign -v -s XcodeSigner -f --timestamp=none /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild
codesign -dvv /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild
xcodebuild -list > /dev/null
#+end_src
没有告警了, 万事 OK.

* Blog 和 Xgfw 转移到了 docker 里面                                             :@计算机:
:PROPERTIES:
:EXPORT_DATE: 2021-03-03
:EXPORT_FILE_NAME: xgfw-with-docker
:END:
把 Blog 和 Xgfw 的配置做成了 Docker, 以后不怕迁移了. 这个 docker 使用了 caddy v1 (主要是 caddy v2 不支持 github hook 了),
和 hugo 来托管我的 blog. 另外内置了 v2ray 来 x GFW.
* Caddy2 Webdav 配置                                                            :Caddy:@计算机:Webdav:
:PROPERTIES:
:EXPORT_DATE: 2020-06-23
:EXPORT_FILE_NAME: caddy2-with-webdav
:END:
Caddy2 和 Caddy1 相比，配置文件差距巨大。这里记录下。
<!--more-->
MacOS 上默认安装的 Caddy2 是没有 Webdav 的，需要自己下载源代码编译。
#+BEGIN_SRC sh
brew install caddy
#+END_SRC

#+BEGIN_QUOTE
#+BEGIN_SRC sh
#克隆代码
git clone https://github.com/caddyserver/xcaddy
#进入文件夹
cd xcaddy
#安装 xcaddy 工具
go get -u github.com/caddyserver/xcaddy/cmd/xcaddy
#编译 caddy，指定版本为 v2.0.0
xcaddy build v2.0.0  --with  github.com/mholt/caddy-webdav
#查看编译了什么模块，应该有 http.handlers.webdav
./caddy list-modules
#把新版 caddy，复制到系统路径
cp ./caddy /usr/local/bin/
#如果是 windows 的话
./caddy.exe list-modules
#copy
cp caddy /usr/local/Celler/caddy/2.0.0/bin/caddy
#+END_SRC
#+END_QUOTE

配置文件
#+BEGIN_EXAMPLE
{
        order webdav last
}
http://localhost:8080 {
        encode gzip
        root * ./
        log {
                output file ./access.log
        }
        webdav {
                root ./
        }
}
#+END_EXAMPLE

运行
#+BEGIN_SRC sh
caddy run -config Caddyfile
#+END_SRC

* 卡特兰数
:PROPERTIES:
:EXPORT_DATE: 2020-06-20
:EXPORT_FILE_NAME: catalan-number
:END:

卡特兰数公式
<!--more-->

- 通项公式一: \( C_n = \frac{1}{n + 1}C^n_{2n} = C^n_{2n} - C^{n - 1}_{2n} \)
- 通项公式二: \( C_n = \frac{1}{n + 1}\sum_{i=0}^{n}(C^i_n)^2 \)
- 递推公式一: \( C_{n + 1} = \frac{2(2n + 1)}{n + 2}C_n \) 且 \( C_0 = 1 \)
- 递推公式二: \( C_{n + 1} = \sum_{i = 0}^{n} C_i C_{n - i} \) 且 \( C_0 = 1 \)
- 递推公式三: \( h(n) = ((4 \cdot n - 2) / (n + 1)) \cdot h(n - 1)\)
- 递推公式四: \( h(n) = h(0) \cdot h(n -1) + h(1) \cdot h(n - 2) + \ldots + h(n - 1) \cdot h(0) \)


* Swift Server 方案真是一步十坑
:PROPERTIES:
:EXPORT_DATE: 2020-03-09
:EXPORT_FILE_NAME: bang-vapor4-swift-server
:END:

最近做的小方案，服务器端用的是 Vapor4. 一路上一步十坑走过来，终于遇到了没法解决
的问题，或者说需要付出很大成本才能解决的问题。

<!--more-->

事情是这样的，昨天配置好了 PG 的中文检索以后，准备使用，发现了几个问题：
1. Vapor4 的 ORM 系统 Fluent 不支持 tsvector, tsquery 数据类型。
2. Fluent4 居然不支持添加索引，非得要我另外写 SQL 脚本在 table 上添加额外的索引。
也不知道这种 ORM 有什么 P 用，写一个查询本来用 SQL 10s 可以搞定的，非得经过 n (
n > 5) 次的封装设计以后才行，而且吧，由于不支持一些非常非常基本的功能导致无法直
接用 Model 来创建数据库 Schema. 这样我还用这种 ORM 干嘛呢？ 更要命的是，Fluent
居然不支持原始 SQL 语句操作。我操，你一些功能不支持也就罢了，大不了我写 SQL 搞定，
连这个路子都给封死，开发人员想啥呢？是天天用 Swift 的最新某些特性改写已有的代码
写迷糊了吧？

实在不行我换 DotNet Core, 换来换去还是 MS 靠谱。

* MacOS 系统上 Posgresql 的中文全文搜索配置和使用
:PROPERTIES:
:EXPORT_DATE: 2020-03-08
:EXPORT_FILE_NAME: textsearch-of-postgresql-on-macos
:END:

最近在做一个小方案，体验一下 PG 的全文搜索。由于我的工作环境是 MacOS, 所以记录一
下，等搞定了才发现这个跟 Linux 没多大区别。

<!--more-->

安装 postgresql
#+BEGIN_EXAMPLE
brew install postgresql
#+END_EXAMPLE

** pg_jieba 方案

安装
#+BEGIN_EXAMPLE
brew install cmake
mkdir ~/tmp && cd ~/tmp && git clone https://github.com/jaiminpan/pg_jieba && cd pg_jieba
git submodule update --init --recursive
mkdir build && cd build
cmake -DCMAKE_PREFIX_PATH=/usr/local/opt/postgres ..
make install
#+END_EXAMPLE

测试
#+BEGIN_EXAMPLE
$ psql -d vapordb
psql (12.2)
Type "help" for help.

@vapordb=# CREATE EXTENSION pg_jieba;
CREATE EXTENSION
@vapordb=# SELECT * FROM to_tsvector('jiebacfg', '小明硕士毕业于中国科学院计算所，后在日本京都大学深造');
                                   to_tsvector
----------------------------------------------------------------------------------
 '中国科学院':5 '小明':1 '日本京都大学':10 '毕业':3 '深造':11 '硕士':2 '计算所':6
(1 row)

@vapordb=# \quit
#+END_EXAMPLE

在测试时，可以感觉到 jieba 的第一次分词有明显的延迟和卡顿，可以通过 Postgresq 预
加载 jieba 的动态库和配置文件改善(/usr/local/var/postgres/postgresql.conf)。
#+BEGIN_EXAMPLE
#------------------------------------------------------------------------------
# CUSTOMIZED OPTIONS
#------------------------------------------------------------------------------

# Add settings for extensions here
# pg_jieba
shared_preload_libraries = 'pg_jieba.so'  # (change requires restart)
# default_text_search_config='pg_catalog.simple'; default value
default_text_search_config='jiebacfg'; uncomment to make 'jiebacfg' as default
#+END_EXAMPLE


** zhparser 方案
安装 scws
#+BEGIN_EXAMPLE
brew install scws
scws -v
#+END_EXAMPLE

下载词典文件
#+BEGIN_EXAMPLE
mkdir -p /usr/local/etc/scws
curl "http://www.xunsearch.com/scws/down/scws-dict-chs-utf8.tar.bz2" | tar xvjf -
mv dict.utf8.xdb /usr/local/etc/scws/
#+END_EXAMPLE

测试效果
#+BEGIN_EXAMPLE
scws -c utf8 -d /usr/local/etc/scws/dict.utf8.xdb -r /usr/local/opt/scws/etc/rules.utf8.ini -M 9 "PostgreSQL 自带有一个简易的全文检索引擎"
PostgreSQL 自带 自 带 有 一个 一 个 简易 简 易 的 全文检索 全文 检索 全 文 检 索 引擎 引 擎
+--[scws(scws-cli/1.2.3)]----------+
| TextLen:   52                  |
| Prepare:   0.0007    (sec)     |
| Segment:   0.0002    (sec)     |
+--------------------------------+
#+END_EXAMPLE

安装 zhparser
#+BEGIN_EXAMPLE
mkdir ~/tmp && cd ~/tmp
git clone https://github.com/amutu/zhparser.git && cd zhparser
make install
#+END_EXAMPLE

测试 zhparser
#+BEGIN_EXAMPLE
$ psql -d vapordb
psql (12.2)
Type "help" for help.

@vapordb=# CREATE EXTENSION zhparser;
CREATE EXTENSION
@vapordb=# CREATE TEXT SEARCH CONFIGURATION zhcnsearch (PARSER = zhparser);
CREATE TEXT SEARCH CONFIGURATION
@vapordb=# ALTER TEXT SEARCH CONFIGURATION zhcnsearch ADD MAPPING FOR n,v,a,i,e,l,j WITH simple;
ALTER TEXT SEARCH CONFIGURATION
@vapordb=# SELECT to_tsvector('zhcnsearch', '人生苦短，我用 Python');
               to_tsvector
------------------------------------------
 'python':5 '人生':1 '用':4 '短':3 '苦':2
(1 row)

@vapordb=# \quit
#+END_EXAMPLE

大功告成。

** 对比

两种方案效果上差不多.
#+BEGIN_EXAMPLE
$ psql -d vapordb
psql (12.2)
Type "help" for help.

@vapordb=# SELECT * FROM to_tsvector('jiebacfg', '小明硕士毕业于中国科学院计算所，后在日本京都大学深造');
                                   to_tsvector
----------------------------------------------------------------------------------
 '中国科学院':5 '小明':1 '日本京都大学':10 '毕业':3 '深造':11 '硕士':2 '计算所':6
(1 row)

@vapordb=# SELECT * FROM to_tsvector('zhcnsearch', '小明硕士毕业于中国科学院计算所，后在日本京都大学深造');
                                to_tsvector
---------------------------------------------------------------------------
 '中国科学院计算所':4 '小明':1 '日本京都大学':5 '毕业':3 '深造':6 '硕士':2
(1 row)

@vapordb=# \quit
#+END_EXAMPLE

** 如何使用
对于全文检索，有两种使用方式，大家可以权衡自己的内容进行选择。
1. 在搜索的时候进行分词，然后搜索对应的字段。
2. 提前把表中需要检索的字段进行分词，保存到一个新的字段中，再在这个字段上建立索
   引进行搜。
两种方案就是时间和空间的取舍：第一种方式创建索引简单，存储空间少，但是比较慢。第
二种方案由于预先进行了分词并存储，浪费了空间，但是时间上肯定用得少。创建索引也有
两种方案：gin 索引和 rum 索引。

*** 第一种
创建索引:
#+BEGIN_SRC sql
CREATE INDEX idx_xxxx ON xxxx_table USING gin(to_tsvector('jiebacfg',
COALESCE(xx_field, '') || COALESCE(xxx_field, '')));
#+END_SRC

查询：
#+BEGIN_SRC sql
EXPLAIN ANALYSE SELECT * FROM xxxx_table
        WHERE to_tsvector('jiebacfg', COALESCE(xx_field, '') || COALESCE(xxx_field, '')) @@
        to_tsquery('jiebacfg', '关键字或者句子');
#+END_SRC

*** 第二种
创建 tsv 字段和索引
#+BEGIN_SRC sql
ALTER TABLE xxxx_table ADD COLUMN tsv tsvector;
UPDATE xxxx_table SET tsv_field = to_tsvector('jiebacfg', COALESCE(xx_field, '') || COALESCE(xxx_field, ''));
CREATE INDEX idx_xxxx ON xxxx_table USING gin(tsv_field);
#+END_SRC

查询：
#+BEGIN_SRC sql
EXPLAIN ANALYSE SELECT * FROM xxxx_table WHERE tsv_field @@ to_tsquery('jiebacfg', '关键词或者句子');
#+END_SRC
当然因为是预先分词保存，所以需要在 update 的时候藉由 =触发器= 来更新 tsv 字段，。
#+BEGIN_SRC sql
CREATE TRIGGER tsvector_update BEFORE INSERT OR UPDATE
       ON xxxx_table FOR EACH ROW  EXECUTE PROCEDURE tsvector_update_trigger('tsv_field', 'jiebacfg', 'xx_field', 'xxx_field');
#+END_SRC

*** rum 索引
使用 rum 索引类似, 但是 rum 引擎默认是没有安装的，需要自己编译，暂时先不用了。

#+BEGIN_SRC sql
CREATE INDEX idx_xxxx ON xxxx_table USING rum(tsv_field rum_tsvector_ops);
#+END_SRC

另外 rum 还支持相似度的查询:
#+BEGIN_SRC sql
SELECT * FROM to_tsvector('jiebacfg', '小明硕士毕业于中国科学院计算所，后在日本京都大学深造');
SELECT * FROM rum_ts_distance(to_tsvector('jiebacfg', '小明硕士毕业于中国科学院计算所，后在日本京都大学深造') , to_tsquery('计算所'));
#+END_SRC

* Swift 5.2 中新增的几个 SwiftPM 提案
:PROPERTIES:
:EXPORT_DATE: 2020-03-05
:EXPORT_FILE_NAME: new-propsals-about-swiftpm-in-swift5.2
:END:

<!--more-->

Swift 5.2 中新增的几个 SwiftPM 提案：
1. https://github.com/apple/swift-evolution/blob/master/proposals/0226-package-manager-target-based-dep-resolution.md
   目标依赖方案
2. https://github.com/apple/swift-evolution/blob/master/proposals/0271-package-manager-resources.md
   资源管理方案
3. https://github.com/apple/swift-evolution/blob/master/proposals/0272-swiftpm-binary-dependencies.md
   闭源二进制目标方案
4. https://github.com/apple/swift-evolution/blob/master/proposals/0273-swiftpm-conditional-target-dependencies.md
   目标条件依赖方案

再加上 Xcode11 中已经实现的 Swift Package 依赖功能，iOS 开发已经可以抛弃
CocoaPods 和 Carthage, 使用纯 SwiftPM 方案进行工程管理了。

* 今日入手 Nintendo Switch Lite                                                 :@生活:SwitchLite:
:PROPERTIES:
:EXPORT_DATE: 2020-01-16
:EXPORT_FILE_NAME: show-my-ninetendo-switch-lite
:END:

入手任天堂 SwitchLite 掌机一台。
<!--more-->

自打 2019 年春节的时候就想买一个 Switch 玩玩，然后听说要出新版。等了接近一线，纯
掌机 SwitchLite 出来了，20 年春节就入了一个，并且额外买了两个游戏：
1. 赛尔达传说－荒野之息: 据说必买的游戏，还没玩。
2. 暗黑破坏神三: 终于可以随时刷刷刷了，可惜不是暗黑二，等暗黑四 吧。

写博客的时间又双叒叕少了！！！
* 你的密码就写在脸上                                                            :@计算机:gfw:
:PROPERTIES:
:EXPORT_DATE: 2020-01-09
:EXPORT_FILE_NAME: fuck-more-face-detection
:END:
使用人脸识别的 app 非蠢即坏 － 关于人脸识别的安全隐患。
<!--more-->

曾经，在互联网发展的初期，几乎每个网民都受到过初步的网络安全的知识科普。网络安全
知识第一条：*不要在不同的网站使用同一套密码*。不同网站使用同一套密码有什么安全问
题呢？听我慢慢道来。

1. 假如你在各个网站使用同一套密码，那几乎就是不设防。比如你在某网站 A 上有一个金
   融帐号，作为犯罪分子的我，如何才能把你的钱弄到我的钱包里呢？太简单了，我可以
   做一个网站 B, 吸引你来注册，假如你用同一套用户名和密码，那我就知道了你在 A 网
   站上的用户名和密码，直接登录就可以随便花你的钱了。
2. 也许你会说，怎么可能这么巧，我能在你开发的 B 网站上注册帐号。那我告诉你，互联
   网发生过 N 次大型网站密码库被拖库的事件了，而且据谣言传说这些网站都收到过相关
   部门的照顾，要求必须使用明文存储密码（为啥要明文？参考第一条）。
3. 也许你会说，我是良民，相关部门不会对我做什么。你这么说也非常有道理。但是架不
   住流行网站 C 的技术太差，被黑客拖库啊。那你的 A 信息就到了黑客手里。
4. 也许你会说，C 网站那么有钱，他们开发的系统没有漏洞，黑客没法攻破。须知日防夜
   防家贼难防，堡垒最容易从内部攻破。互联网发展史几十年，不知道有多少公司员工被
   送进了看守所。
5. 党一大代表周佛海都当了叛徒，所以人永远是最大的安全隐患，相关部门也无法避免每
   个党员都恪守党规，遵纪守法，18 big 以来打的老虎可都是在党旗下宣过誓的。

现在大家知道同一套密码的危害了吧？互联网发展到今天，众多 APP 居然开启了人脸识别
认证，这不能不让人怀疑难道是又有相关部门照顾，要求收集人脸数据了？相对于密码，人
脸信息更加不安全。

1. 密码泄漏了，你可以换一个，人脸信息泄漏了，你去整容？
2. 不同的网站可以使用不同的密码，不同的网站能用不同的脸吗？你有几张脸？
3. 密码只有你自己知道，但是人脸大家都能看到，相当于你把密码挂在了脸上。
4. 也许你会说，除了密码外，还有肢体识别呢。别逗了您，知道 deepfake 吗？你可以去
   pxxnhub 上去看看，只要有照片，就可以把脸贴上去。还有 crazytalk 软件，直接根据
   某张照片做出眨眼，摇头，傻乐等各种动作表情，怎么样？
5. 蓬勃发展的过脸黑产已经说明了一切。

所以，强制开启人脸识别的 APP 非蠢即坏。
1. 追新，使用花拳绣腿的功能而不考虑安全后果，这是蠢。
2. 趁着中国个人隐私立法的缺失，搜集用户的人脸数据，将来怎么用凭自己心情，这是坏。

* SE-0272: Package Manager Binary Dependencies                                  :@计算机:Swift:
:PROPERTIES:
:EXPORT_FILE_NAME: swift-se0272-accepted
:EXPORT_DATE: 2020-01-09
:END:
SE-0272: Package Manager Binary Dependencies 提案被接受。
<!--more-->
经过漫长的讨论，Swift Package Manager 的二进制文件依赖的提案终于通过了，以后
SwiftPM 终于可以直接管理其他第三方的，无源代码的各种 SDK 了。 继 Cocoapods,
Carthage 之后，SwiftPM 终于成为了一个可用的 iOS 工程管理方案。

* 2020 年最值得学习的新旧语言                                                   :@计算机:
:PROPERTIES:
:EXPORT_FILE_NAME: programming-languages-which-be-worth-to-learn
:EXPORT_DATE: 2019-12-23
:END:
2020 年值得学习的新语言和古董语言。
<!--more-->

1. C: 倚天剑，不解释。
2. Python: 屠龙刀，糙快猛。
3. Rust: 大家都想学。
4. Swift: 简单的 Rust.
5. Scheme: 情怀语言，码农应该把它当情人。

* 在 org-mode 中内嵌源代码                                                      :@计算机:Emacs:org_mode:
:PROPERTIES:
:EXPORT_FILE_NAME: inline-code-block-in-org_mode
:EXPORT_DATE: 2019-12-19
:END:
我们知道在 org-mode 中，单独的源代码块环境是使用 =#+BEGIN_SRC= 和 =#+END_SRC=.
但是在很多情况下，我们可能在一句话中内嵌一句代码，这时候用 =#+BEGIN_SRC= 就无法
做到了。
<!--more-->

org-mode 的内嵌代码块格式是： =src_LANG[headers]{your code}=, 例如：
=src_sh[:exports code]{echo -e "test"}= 的效果是这样的：src_sh[:exports
code]{echo -e "test"}.
=src_xml[:exports code]{<tag>text</tag>}= 的效果是这样的：src_xml[:exports
code]{<tag>text</tag>}.

虽然在博客里面看不出效果，如果导出成 HTML 并且支持语法高亮的话，就会看出来内嵌代
码语句的语法高亮效果了。

* 推荐一个 Rust 教程                                                            :@计算机:Rust:
:PROPERTIES:
:EXPORT_FILE_NAME: recommend-rust-crash-course-tutorial
:EXPORT_DATE: 2019-12-17
:END:

Rust 语言既时尚，又安全，又难学。最让人崩溃的一点是文档虽然多，但是质量却不好，
主要是 Rust 入门的曲线比较陡峭。今天给大家推荐一个曲线不错的教程。

<!--more-->

[[https://www.snoyman.com/blog/2018/10/introducing-rust-crash-course][Rust crash course]] 曲线比较不错，推荐大家阅读。如果有时间，翻译成中文。

* 如何优雅地删除 Git submodule?                                                 :@计算机:git:
:PROPERTIES:
:EXPORT_FILE_NAME: how-to-remove-git-submodule-elegantly
:EXPORT_DATE: 2019-12-16
:END:

Git 中没有一个专门的命令对 submodule 进行删除。比较优雅的删除方式如下：

<!--more-->

1. 在 =.gitmodules= 文件中删除关于 xxxx 的 section.
2. 保存 =.gitmodules= 并使用 =git add .gitmoudles= 保存修改。
3. 在 =.git/config= 文件中删除关于 xxxx 模块的配置章节。
4. 运行 =git rm --cached path_to_xxxx_submodule= (没有后面的 "/").
5. 运行 =rm -rf .git/modules/path_to_xxxx_submodule= (没有后面的 "/").
6. 提交修改 =git ci -m "remove xxxx submmodule "= .
7. 删除不用的目录 =rm -rf path_to_xxxx_submodule= .
  
* 把 Markdown 格式的文件转换成 org-mode 格式                                    :@计算机:Emacs:org_mode:markdown:
:PROPERTIES:
:EXPORT_FILE_NAME: convert-markdown-to-org_mode
:EXPORT_DATE: 2019-12-15
:END:

正在把以前的 jekyll 博客迁移到新的 ox-hugo 上，虽然没有几篇，但是如果手工把
markdown 转换成 org-mode 还是有不小的工作量的， 还好有 =pandoc=, 转换完成后稍微
修改一下就可以了。
<!--more-->

#+BEGIN_EXAMPLE
brew install pandoc
pandoc -f markdown -t org xxxx.md -o xxxx.org
#+END_EXAMPLE

* 使用 ox-hugo 编写博客                                                         :@计算机:hugo:org_mode:
:PROPERTIES:
:EXPORT_FILE_NAME: use-ox-hugo-write-blog
:EXPORT_DATE: 2019-12-15
:END:

- [[https://sheishe.xyz/post/hugo-blogging-with-ox-hugo/][一篇很棒的关于 =ox-hugo= 的文章]]
- [[http://www.zmonster.me/2018/02/28/org-mode-capture.html][关于 org-capture 的一篇文章]]

* 解决 Archlinux 的域名解析超时出错的问题                                       :@计算机:ArchLinux:resolved:systemd:
:PROPERTIES:
:EXPORT_FILE_NAME: fix-systemd-resolved-dnssec
:EXPORT_DATE: 2019-12-14
:END:

这个问题困扰了我好久 如果使用 systemd-resovled 启动域名解析服务，在一段时间不访
问网络后重新进行网络访问时经常出现 =Host name not found=.

<!--more-->

解决的方法是在 =/etc/systemd/resolved.conf= 文件中添加:

#+BEGIN_EXAMPLE
DNSSEC=no
#+END_EXAMPLE

* COMMENT 计划中的分类
- 计算机
- 书法
- 中国象棋
- 儿童教育
