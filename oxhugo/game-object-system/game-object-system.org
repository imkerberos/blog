#+TITLE: 游戏对象模型的设计与实现
#+STARTUP: content
#+AUTHOR: Eviler
#+OPTIONS: creator:t toc:nil
#+PROPERTY: header-args :eval no
#+HUGO_BASE_DIR: ../../
#+HUGO_AUTO_SET_LASTMOD: f
#+HUGO_SECTION: blog
#+HUGO_CUSTOM_FRONT_MATTTER: :authorbox true :comments true :toc false :mathjax true
#+HUGO_WEIGHT: auto
#+HUGO_TAGS: game oo es design
#+HUGO_CATEGORIES: 计算机
#+HUGO_DRAFT: false

* 游戏对象模型设计与实现（四）
:PROPERTIES:
:EXPORT_FILE_NAME: game-object-system-part4
:EXPORT_DATE: 2013-11-17
:END:

最近几个月一直在写一些与游戏无关的程序放到 AppStore 上, 主要是用了一些 FRP 的东西.
关于 FRP, 以后再写一些文章介绍. 期间抽空在 iOS 把 Artemis 实现了一遍, 开始做一个
横版 2.5d 的动作游戏. 等实现完了发现有人把另外一个 Objective-C 的实现放到了 GitHub
上. 不过 GitHub 上的版本貌似是基于 Artemis 0.96 的, 其中后来 Artemis 的一些优化比如
Aspect 等并没有同步进去. 我是直接基于 Artemis 的最新版本做的, 也不算重复发明轮子了.

<!--more-->

本章主要来介绍一下 Entity-System 的一些概念.
- Entity: 实体, 是组件的一个集合. 当然在实现上, Entity 只是一个引用的计数或者 ID 或者 UUID, 其内部
并没有任何数据结构来包含实体中的 Component, 如果对数据库有一些了解的话, 这个 Entity 相当于某个
表的 primary key, 用以索引 Component.

- Component: 组件, 组件内部只包含组件的数据, 而并不包含任何行为 (在 Component-Based 的架构中不
是这样, 至少 Unity3D 中的 Component 是有 update 等行为的.). 因为 Component 通常的实现方式是用 OOP
的 class 来实现, 所以 Component 中的数据的 setter 和 getter 不算是行为.

- System/Subsystem: 系统, 处理组件的行为. 既然组件只包含数据, 那么组件的行为当然要表现出来, 表现
组件行为的部分就是系统. 游戏逻辑实现都在系统中实现.

由于 Entity-System 比较灵活, 所以现在也没有所谓的 =设计模式= 来约束开发者如何设计 Component 和 System,
所以在使用 Entity-System 设计 Component 的时候会比较纠结. 这一点和 OOP 的 N 多`设计模式`不同, 至
少我在使用的时候对于 =什么东西做成 Component= 之类的问题纠结不已.

下面就举一个 OOP 和 Entity-System 相对应的例子来加深我们对于 Entity-System 的理解.

在 OOP 中, 我们知道一个对象实例是数据和行为绑定的, 这个对于惯用 OOP 来思考的我们来说是非常显然的,
因为没有行为的数据是没有意义的, 而没有数据的行为则是废行为. 看以下的 C++ 伪代码:

#+BEGIN_SRC c++
class Player : public GameObject
{
    public:
        move (int deltaTime) {
            x = x + velocity * deltaTime;
            y = y + velocity * deltaTime;
        }
    private:
        int x;
        int y;
        int velocity;
};
#+END_SRC

以上的代码从底层的角度来考虑, =Player= 对象其实包含两部分:

- 对象的数据: =x=, =y=, =velocity=
- 对象的行为: =move=

可能大家经常会看到这样的话: * =OO= 是一种思想假, 并不是 C++ 的专利, 用 C 也可以
实现.* 那我们就用用 C 来实现, 可能更接近于本质的理解:

#+BEGIN_SRC c
typedef struct {
    int x;
    int y;
    int velocity;
} Player;

void Player_Move (Player* self, int deltaTime)
{
    self->x = self->x + self->velocity * deltaTime;
    self->y = self->y + self->velocity * deltaTime;
}
#+END_SRC

我们把以上代码中的 =Player= 结构体 看成两个组件的集合, 把 =Player_Move= 函数看成是两个组件的组合在一起的 Move 系统.
代码演化一下:
#+BEGIN_SRC c
typedef struct {
    struct {
        int x;
        int y;
    } position;
    struct {
        int velocity;
    } velocity;
} Player;

void System_Move (int deltaTime)
{
    for (Player* p in All_Entities()) {
        if (Player_containsStruct(p, postion) && Player_containsStruct(p, velocity)) {
            p->postion.x = p->position.x + p->velocity.velocity * deltaTime;
            p->position.y = p->position.y + p->velocity.velocity * deltaTime;
        }
    }
}
#+END_SRC

上面是伪代码, 其中 =Player_containsStruct= 是不存在的, 但是不妨碍我们可以用其他手段来实现这个功能.
实际上, =postion= 和 =velocity= 就是两个组件, 而 =System_Move= 则就是系统, 一个实现了 Move 功能的系统,
当然, 这个系统只有在 =Player= 这个 Entity 同时具有 =position= 和 =velocity= 这两个组件的时候才有意义.
这就是 Entity-System 的思想.

对比 OOP 思想来看, OOP 意图把数据封装起来, 只暴露给外部一些行为接口, 其目的是为了达到代码重用. 而
=Entity-System= 又回归了我们在接受 =OOP= 之前的做法, 把数据和行为分离开了.

可以这么理解, 无论是 =OOP= 还是 =Entity-System= 其本质不过是一种 =分类= 的方式, =OOP= 试图用 =Is-A= 的关
系来静态组织我们需要处理的对象, 而 =Entity-System= 则是用 =Has-A= 的动态关系来组织我们所需要处理的对象.
诚然, 在 =OOP= 中有 =Has-A= 的关系, 但那是在代码中写死的静态关系, 而 =Entity-System= 的 =Has-A= 关系要求
我们实现一种动态的  =Has-A= 关系管理. 这也是 =Entity-System= 的最主要的特点. 实现动态的  =Has-A= 关系有
很多方法, 这里就不再赘述.

这种动态的 =Has-A= 关系赋予我们无限扩展的能力而不必去 *修改* 代码, 也不是要求我们在父类中添加新的行为, 我们
需要做的只是去给 Entity 添加新的 Component, 或者去增加一个 System 处理. 而且这个 System 处理和原来的
System 是分离的, 没有任何依赖关系. 那以后的项目我们甚至不需要修改任何源代码就可以使用. 回顾前面 =狮鹫= 的
例子, 假如我们是用 Entity 方式实现的话, 我们给狮鹫添加一个 Run 的 Component, 则 我们系统原有的 RunSystem
和 RunComponent 可以赋予狮鹫陆地行走的功能, 而再添加一个 FlyComponent, 则我们系统原有的 FlySystem 则赋予
狮鹫飞行的功能. ? 为什么不修改源代码呢? 上面的 =Player= 例子里面的两个 component: =position= 和 =velocity=
不就是代码中写死的么? 答案是:  =Entity-System= 的动态 =Has-A= 关系实现允许我们这样来做:

#+BEGIN_SRC c
Player_AddComponent (EntityId player, Component* position);
Player_AddComoonent (EntityId player, Component* velocity);
#+END_SRC
以上是伪代码只是方便讲解, 请勿当真.
* 游戏对象模型设计与实现（三）
:PROPERTIES:
:EXPORT_FILE_NAME: game-object-system-part3
:EXPORT_DATE: 2013-04-21
:END:

由于本人对游戏实现认识不足, 总结一下几种游戏设计模式的区别仅供参考, 也许你有更深入的认识,
欢迎交流. 对于我这种菜鸟来说, Entity-System 比较适合.

基本上所有的运行期动态游戏对象实现的目的大部分是为了实现数据驱动的方式. 数据驱动的好处就
在于可以明确分离 =程序= - =策划= 在游戏实现环节的工作.也很方便 =程序= 开发一些编
辑工具给 =策划= 使用,提高 =策划= 的工作效率,满足 =策划= 高度定制游戏的需求.

<!--more-->
- Object-Centric/OO
  - 运行期游戏对象为静态对象.
  - 游戏对象的所有数据和行为在同一个类中.
  - 调试方便.
  - 不利于扩展和重用.

- Component-Based
  - 运行期游戏对象为动态对象.
  - 游戏的对象仅仅是一个 Component 的容器外加一个游戏对象的 ID.
  - 游戏对象的行为通过 Component 来体现.
  - Component 内部包含了其所用的数据,也定义了组件的行为.
  - Component 之间不允许有依赖关系.
  - 必须有一个事件或者消息系统来对 Component 之间的依赖和交互进行解耦.
  - 必须精心定义各种消息来满足 Component 之间或者游戏对象之间的交互.
  - 本身框架实现简单, 但是消息设计比较复杂.
  - 调试不方便.

- Property-Centric/Attribute-Behaviour
  - 运行期游戏对象为动态对象.
  - 为了解决 Component 的依赖问题.
  - 为了解决 Component 之间重叠属性导致的内存占用问题.
  - 以数据为中心, 在游戏对象内部增加属性.
  - 游戏对象的行为由其属性决定, 属性再决定 Behaviour.
  - 设计模式复杂.
  - 调试不方便.

- Entity-System
  - 运行期游戏对象为动态对象.
  - 游戏的对象仅仅是一个 Component 的容器外加一个游戏对象的 ID.
  - 游戏对象的行为通过 Component 来体现.
  - Component 内部仅仅包含本组件所用的数据.
  - Component **不** 包含任何行为(setter/getter 等必须品除外).
  - Component 的行为由 Subsystem 来实现.
  - Component 的交互和依赖可以通过不同的 Subsystem 来组合处理.
  - 事件或者消息系统不是必须的.
  - Entity 和 Component 组成了一个类似关系数据库的表, Entity 是主键, Component 是列.
  - 设计模式简单.
  - 运行期计算量比较大, 需要做一些优化.
  - 调试不方便.

对于 Component-Based 应用最广泛和成功的应该就是 =Unity3D= 了, 我对 =Unity3D= 不了解, 没有多少发言权,
但是其广泛的应用证明了这种设计的合理性. 一直想研究一下, 但是手头有一些程序要写, 也没有太多时间. 最近
主要的精力放在了 Entity-System 上.

Entity-System 的一些资料主要来源于 [Adam's Blog][] 上一些资料, 另外根据这些资料, 有人做了 [Artemis][]
这个开源的框架. 下一章的内容主要关注在 Entity-System 上.
[Adam's Blog]: http://t-machine.org/ "Adam's Blog"
[Artemis]: http://gamadu.com/artemis/ "Artemis"

* 游戏对象模型设计与实现（二）
:PROPERTIES:
:EXPORT_FILE_NAME: game-object-system-part2
:EXPORT_DATE: 2013-04-19
:END:

严格来说，一个游戏的实现框架有三种：

- Object-Centric：面向对象方式的。
- Component-Based：面向组件的。
- Entity-System：实体系统？

我们依次来分析这三种实现方式的优点和缺点.

<!--more-->

** Object-Centric

面向对象(OO)可能是我们每一个写过程序的人都耳熟能详的概念. 这里我就不废话了, 单说面向对象在游戏实现方面的不足之处.

众所周知, OO 的特性在于通过继承来实现代码的可重用性, 也许我们设计一个游戏, 游戏里面的对象有如下的继承结构:

[[file:Object-Centric-Inherit-01.png]]

这个结构看起来还可以, DrawableObject 处理可以在屏幕上显示的元素, 而 Trigger 触发
器是不用在屏幕上显示的.

加入我们有一个游戏元素是可以动画的, 比如一个 NPC 怪物有走路的动作, 那我们需要一
个负责处理动画的类 AnimatedObject, 显然 Animated 对象应该是一个可以显示的对象,
必然在 DrawableObject 下面. 那问题就来了, AnimatedObject 是直接继承
DrawableObject 呢还是 SimulatedObject ?

考虑到我们的 NPC 可能需要进行物理方面的模拟, 我们暂时挂在 SimulatedObject 类下面
吧. 看起来我们的继承结构变成了这样:

[[file:Object-Centric-Inherit-02.png]]

问题是我们可能还有一些 NPC 会有触发效果的, 比如说接近了 NPC 以后, 玩家与 NPC 进
入战斗状态. 那这种 NPC 怎么处理呢? 这种 NPC 同时继承 NPC 和 TriggerObject ?

一个明显的例子就是比如我们有一个交通工具的对象继承体系:

[[file:Object-Centric-Inherit-03.png]]

如果大家玩过 =魔兽世界= 肯定知道, 狮鹫是可以在陆地上跑, 也可以在天上飞的. 这种情
况下, 狮鹫该继承哪个类呢? 还是多继承?

真是一个糟糕的想法! 我们在刚开始学习的时候, 也许老师就已经说过, 尽量不要用多重继
承! 甚至有些语言在实现上就不支持多重继承. 也许我们硬着头皮使用多继承的方式来解决
狮鹫的问题. 它继承于 AirVehicle 和 LandVehicle. 但是不可避免得, 我们需要增加狮鹫
的接口来处理陆地行走(Run)和飞行(Fly)两个行为. 但是在 Vehicle 里面可能只有一个
(MoveTo)接口, 好吧,我们再修改一下, 给 Vehicle 里面增加接口: Run, Fly, Swim 三个
接口可以解决水陆空三种交通方式的问题.

如果我们都需要使用增加基类的接口这样来满足这样的需求, 那可能导致我们的基类无比庞
大而难以维护, 而且, 面向对象的"一个接口多种形态"的理念又体现在哪里呢?

问题在于: 如果不使用多继承, 我们无法实现具体对象的行为, 如果使用多继承, 则导致基
类需要定义 N 多的接口. 在单继承体系中, 我们对于对象的分类只能遵从一个标准, 如果
一个对象通过一种标准获得了在继承体系中的地位, 就没有办法遵从另外一个标准来确定自
己在继承体系中的地位. 还是拿狮鹫的例子来说: 狮鹫是一种交通工具, 同时, 它还是一种
生物, 还是一种 NPC ...... 那狮鹫到底是继承交通工具, 还是生物, 还是 NPC 呢?

也许我们早就听到过这样的忠告: " *尽量使用 =组合= 方式而非 =继承= 方式来实现自己
的类.* "

** Component-Based

#+BEGIN_QUOTE
"你看到我手上拿的这个东西了吧，表面上看它是一个大哥大电话，但是你看这里有一层金
属网膜，实际上，它是一个刮胡刀，这样在执行任务的时侯，也可以神不知鬼不觉地刮胡子。
至于这个表面上看是一个刮胡刀，其实呢，它是一个吹风机。" -- 《国产 007》
#+END_QUOTE

OO 不是一切, OO 也不是一无是处.

现实世界中的一个对象到底是因为他是某一具体的对象而具有了某些功能还是因为其具有了
某些功能而是一个具体的对象? 太绕口了.

拿上面的刮胡刀(暂定名称)来说,它具有大哥大的外观,刮胡子的功能. 假如我们用 OO 的概
念来定义的话, 它到底是什么? 大哥大亦或是刮胡刀? 两者都不是.我们唯一确定的就是,
它是一个"存在".:)

#+BEGIN_SRC c++
class Mysticism : public Object {
    public:
        Aspect* aspect = new Aspect("大哥大");
        Function* function = new Function("刮胡子");
};
#+END_SRC

也许这样更准确一些.

在组件编程的概念中, 一个对象由若干组件构成. 如果问这个对象到底是什么东西, 那要看
你从哪方面问. 比如, 这个东西看上去是什么? "大哥大". 这个东西能干什么? "刮胡子".
如果你问, 这是什么? "一个存在". :)

* 游戏对象模型设计与实现（一）
:PROPERTIES:
:EXPORT_FILE_NAME: game-object-system-part1
:EXPORT_DATE: 2013-04-16
:END:

准备做一个 RPG 的游戏。由于以前没有做过游戏，首先学习了 cocos2d-iphone 的一些资料，再从网上看了一些写游戏
的教程，自认为可以动手开始写框架的时候，发现遇到了相当大的困难。

cocos2d-iphone 的教程或者网上的一些其他教程有一个共同点：都是拿一个 =太空大战=
或者 =坦克大战= 之类的作为实现
的例子。诚然这种简单的游戏可以充分考虑展现游戏框架本身的特点，但是从游戏编程上来说，有很大的误导之嫌。再加
上由于没有游戏编程的经验，同时受这些教程或者书籍中的这些例子的误导，思维上还是以写软件的方式来写游戏，认为
游戏不过是一种特殊的软件。

<!--more-->

当动手设计游戏框架的时候，自己才发现，要实现一个稍微复杂的游戏基本上是一个不可能的目标。排除美工方面的因素
不提，单说游戏框架，RPG 游戏的框架使用软件的方式基本上无法实现，主要表现在：

- RPG 游戏太复杂，里面有太多的物品。使用类继承的方式，或许要写几十甚至上百个类。
- 框架的目标本来是支持利用脚本进行扩展和写游戏的 AI 逻辑的，但是同样受到第一点因素的影响，不太可能实现。
- 即使实现了，估计要到猴年马月了。

然后继续疯狂查资料，看设计，大约花了几天的时间才发现，一开始的出发点就错了！前面看过的书籍和教程或许在教人
写一个非常简单的游戏，或者说教你如何调用框架 API、如何写动画、如何写 =坦克大战=
和 =太空大战= ,却唯独没有教人如
何写游戏！！！

说白了，一个成熟的 RPG 游戏绝对不是用写`太空大战`或者`坦克大战`这种方式所完成的。其原因在于这些游戏都是使用
传统的面向对象（OO）方式实现的。实际上这样的游戏在商业上几乎全部采用组件方式(ES)来实现的。

传统的 OO 方式叫做 =Object-Centric= ，而组件的方式为 =Component-Based= 或者叫
=Property-Centric= 亦或 =Entity-System= 。 具体还没有一个标准的称谓，但是其本质是一样的。

